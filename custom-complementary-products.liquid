{% comment %}Custom Complementary Products{% endcomment %}
{% comment %}
  {% if product.metafields.custom.complementary_products.value != blank %}
    {% render 'custom-complementary-products', product: product, product_form_id: product_form_id %}
  {% endif %}
{% endcomment %}

{% assign min = 1 %}
{% assign max = 100 %}
{% assign diff = max | minus: min %}
{% assign random_number = 'now' | date: '%N' | modulo: diff | plus: min %}
{% assign fbt_id = 'now' | date: '%s' | plus: random_number %}
{% assign complementary_form_id = product_form_id | append: '--complementary' %}

<div class="product-popup__overlay" id="popupOverlay"></div>
<div class="product-popup" id="productPopup">
  <div class="product-popup__header">
    <div class="upsell-featured-image">
      <img
        src="{{ product.featured_image | image_url }}"
        width="100%"
        height="auto"
        loading="lazy"
        fetchpriority="low"
      >
    </div>
    <div class="upsell-details">
      <div class="upsell-product-title">
        {{ product.title }}
        {% unless product.has_only_default_variant %}
          <div class="variant-title">
            {{- product.selected_or_first_available_variant.title -}}
          </div>
        {% endunless %}
      </div>
      <!-- Custom code for product rating -->
      {%- if product.metafields.reviews.rating.value != blank -%}
        {% liquid
          assign rating_decimal = 0
          assign decimal = product.metafields.reviews.rating.value.rating | modulo: 1
          if decimal >= 0.3 and decimal <= 0.7
            assign rating_decimal = 0.5
          elsif decimal > 0.7
            assign rating_decimal = 1
          endif
        %}
        <div
          class="rating"
          role="img"
          aria-label="{{ 'accessibility.star_reviews_info' | t: rating_value: product.metafields.reviews.rating.value, rating_max: product.metafields.reviews.rating.value.scale_max }}"
        >
          {% render 'icon', icon: 'star' %}
          <span aria-hidden="true">
            {{ product.metafields.reviews.rating.value.rating | round: 1 }}
          </span>
          <span aria-hidden="true"> | </span>
          {% render 'icon', icon: 'whatsapp-verified' %}
          <span aria-hidden="true"
            >({{ product.metafields.reviews.rating_count }}
            {{ product.metafields.reviews.rating_count | pluralize: 'Review', 'Reviews' -}}
            )</span
          >
        </div>
      {%- elsif product.metafields.reviews.rating.value == blank -%}
        <p class="rating">
          <span aria-hidden="true">No Reviews</span>
        </p>
      {%- endif -%}
      <!-- Custom code for product rating ends here -->
      <div class="price-container">
        <div class="price-upsell">
          {{ product.selected_or_first_available_variant.price | money_with_currency }}
        </div>
        <div class="compare-price-upsell">
          {{ product.selected_or_first_available_variant.compare_at_price | money_with_currency }}
        </div>
      </div>
    </div>
    <button class="product-popup__close" onclick="hidePopup()" aria-label="Close">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
        focusable="false"
        class="icon icon-close"
        width="32"
        height="32"
        fill="none"
        viewBox="0 0 18 17"
      >
        <path d="M.865 15.978a.5.5 0 00.707.707l7.433-7.431 7.579 7.282a.501.501 0 00.846-.37.5.5 0 00-.153-.351L9.712 8.546l7.417-7.416a.5.5 0 10-.707-.708L8.991 7.853 1.413.573a.5.5 0 10-.693.72l7.563 7.268-7.418 7.417z" fill="#000"/>
      </svg>
    </button>
  </div>
  <div class="product-popup__content">
    {% assign complementary_products = product.metafields.custom.complementary_products.value %}
    {% if complementary_products != blank %}
      <div class="complementary-products-upsell">
        <div class="product-list-container">
          <h2 class="title-upsell">Wish to save more?</h2>
          <div class="product-list-upsell">
            {% assign popup_upsell_sku = product.selected_or_first_available_variant.sku %}
            {% for variant in complementary_products %}
              {% if variant.sku != popup_upsell_sku %}
                <div
                  class="product-item-upsell{% if forloop.first %} most-ordered-upsell{% endif %}"
                  data-sku="{{ variant.sku }}"
                  product-id="{{ product.id }}"
                >
                  {% if forloop.first %}
                    <div class="badge-upsell new">Most Popular</div>
                  {% endif %}
                  <div class="product-item-upsell-inner">
                    <div class="product-image-upsell">
                      <img
                        src="{{ variant.product.featured_image | image_url }}"
                        width="100%"
                        height="auto"
                        loading="lazy"
                        fetchpriority="low"
                      >
                    </div>
                    <div class="product-detail-upsell">
                      <div class="product-info-upsell">
                        <h3 class="product-title-upsell">
                          {{ variant.product.title }}
                          {% unless variant.product.has_only_default_variant %}
                            <span class="variant-title-upsell variant-details">{{ variant.title }}</span>
                          {% endunless %}
                        </h3>
                        <!-- Custom code for product rating -->
                        {%- if variant.product.metafields.reviews.rating.value != blank -%}
                          {% liquid
                            assign rating_decimal = 0
                            assign decimal = variant.product.metafields.reviews.rating.value.rating | modulo: 1
                            if decimal >= 0.3 and decimal <= 0.7
                              assign rating_decimal = 0.5
                            elsif decimal > 0.7
                              assign rating_decimal = 1
                            endif
                          %}
                          <div
                            class="rating"
                            role="img"
                            aria-label="{{ 'accessibility.star_reviews_info' | t: rating_value: variant.product.metafields.reviews.rating.value, rating_max: variant.product.metafields.reviews.rating.value.scale_max }}"
                          >
                            {% render 'icon', icon: 'star' %}
                            <span aria-hidden="true">
                              {{ variant.product.metafields.reviews.rating.value.rating | round: 1 }}
                            </span>
                            <span aria-hidden="true"> | </span>
                            {% render 'icon', icon: 'whatsapp-verified' %}
                            <span aria-hidden="true"
                              >({{ variant.product.metafields.reviews.rating_count }}
                              {{ variant.product.metafields.reviews.rating_count | pluralize: 'Review', 'Reviews' -}}
                              )</span
                            >
                          </div>
                        {%- elsif variant.product.metafields.reviews.rating.value == blank -%}
                          <p class="rating">
                            <span aria-hidden="true">No Reviews</span>
                          </p>
                        {%- endif -%}
                        <!-- Custom code for product rating ends here -->
                        <div>
                          <span class="price-upsell-sale-list">{{ variant.price | money_with_currency }}</span>
                          <span class="price-upsell-compare-list">
                            {{- variant.compare_at_price | money_with_currency -}}
                          </span>
                        </div>
                      </div>
                      <div class="product-add-upsell">
                        <div class="saving-amount">
                          Save {{ variant.compare_at_price | minus: variant.price | money_without_trailing_zeros }}
                        </div>
                        <div class="product-select-upsell">
                          <input
                            type="checkbox"
                            id="complementaryProducts-{{ variant.id }}"
                            name="complementaryProducts-{{ variant.id }}"
                            class="complementaryProducts"
                            value="{{ variant.id }}"
                            data-price="{{ variant.price | money_without_currency }}"
                          >
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              {% endif %}
            {% endfor %}
          </div>
        </div>
      </div>
    {% endif %}
    <div class="popup-footer">
      <product-form class="sticky-cart__form">
        {%- form 'product', product, id: complementary_form_id, novalidate: 'novalidate', data-type: 'add-to-cart-form' -%}
          <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
          <input type="hidden" name="quantity" value="1" form="{{ complementary_form_id }}">
          <input type="hidden" name="properties[_FBTMST]" value="1" form="{{ complementary_form_id }}">
          <input type="hidden" name="properties[_FBT]" value="FBT-{{ fbt_id }}" form="{{ complementary_form_id }}">
          <div class="product-form__buttons">
            <button
              type="button"
              class="product-form__submit button button--small"
              form="{{ complementary_form_id }}"
              onclick="complementaryProducts(event)"
              {%- if product.selected_or_first_available_variant.available == false %}
                disabled="disabled"
              {% endif -%}
            >
              {% if product.selected_or_first_available_variant.available %}
                {{ 'products.product.add_to_cart' | t -}}
                <span class="selected-count-upsell">(<span id="selected-count">1</span>)</span
                ><span id="totalOrderValue"></span>
              {% else %}
                {{ 'products.product.sold_out' | t }}
              {% endif %}
            </button>

            <button
              type="submit"
              name="add"
              class="product-form__submit button button--small"
              style="display:none;"
              name="hideSubmit"
              id="hideSubmit"
              form="{{ complementary_form_id }}"
              {%- if product.selected_or_first_available_variant.available == false %}
                disabled="disabled"
              {% endif -%}
            >
              {% if product.selected_or_first_available_variant.available %}
                {{ 'products.product.add_to_cart' | t }}
              {% else %}
                {{ 'products.product.sold_out' | t }}
              {% endif %}
            </button>
          </div>
        {%- endform -%}
      </product-form>
    </div>
  </div>
</div>

<script>
let totalOrderValue = 0;

function updateTotalOrderValue() {
  // Start with base product price
  let total = parseFloat({{ product.selected_or_first_available_variant.price | money_without_currency }});

  // Add prices of checked complementary products
  document.querySelectorAll('.complementaryProducts:checked').forEach(checkbox => {
    // Remove any currency symbols and convert to number
    const price = parseFloat(checkbox.dataset.price.replace(/[^0-9.-]+/g, ''));
    if (!isNaN(price)) {
      total += price;
    }
  });

  // Update the display with proper formatting
  document.getElementById('totalOrderValue').textContent = total.toLocaleString('en-IN', {
    style: 'currency',
    currency: 'INR',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).replace('INR', '₹');
}

function complementaryProducts(event) {
  event.preventDefault();

  const addToCartButton = event.currentTarget;
  addToCartButton.classList.add("loading");
  addToCartButton.setAttribute("aria-disabled", true);

  // console.log("complementaryProducts");
  let items = [];
  document.querySelectorAll("input.complementaryProducts:checked").forEach(function (element) {
    // console.log(element.value);
    items.push({
      id: element.value,
      quantity: 1,
      properties: {_FBT: 'FBT-{{ fbt_id }}'}
    });
  });
  // console.log(items);
  let formData = {
    'items': items
  };

  fetch(window.Shopify.routes.root + 'cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    })
    .then(response => {
      document.getElementById("hideSubmit").click();

      let targetNode = document.querySelector("#mini-cart");
      if (targetNode != null) {
        var observerMiniCart = new MutationObserver(function () {
          hidePopup();
          addToCartButton.classList.remove("loading");
          addToCartButton.removeAttribute("aria-disabled");
        });
        const config = {
          attributes: true,
          childList: true,
          characterData: true
        };
        observerMiniCart.observe(targetNode, config);
      }

      return response.json();
    })
    .catch((error) => {
      console.error('Error:', error);
      addToCartButton.classList.remove('loading');
    });
}

function showPopup() {
  document.getElementById('popupOverlay').classList.add('show');
  document.getElementById('productPopup').classList.add('show');
  document.body.classList.add('overflow-hidden');
  filterComplementaryProducts();
  updateTotalOrderValue();
}

function hidePopup() {
  document.getElementById('popupOverlay').classList.remove('show');
  document.getElementById('productPopup').classList.remove('show');
  document.body.classList.remove('overflow-hidden');
  resetCheckboxesAndCount();
}

function resetCheckboxesAndCount() {
  var checkboxes = document.querySelectorAll('.complementaryProducts');
  checkboxes.forEach(function (checkbox) {
    checkbox.checked = false;
  });
  updateCount();
  updateTotalOrderValue();
}

function updateCount() {
  var checkedCount = document.querySelectorAll('.complementaryProducts:checked').length;
  var countDisplay = document.getElementById('selected-count');
  countDisplay.textContent = checkedCount + 1;
}

function filterComplementaryProducts() {
  const mainSku = document.getElementById('productPopup').dataset.mainSku;
  const complementaryProducts = document.querySelectorAll('.product-item-upsell');

  complementaryProducts.forEach(product => {
    if (product.dataset.sku === mainSku) {
      product.style.display = 'none';
    } else {
      product.style.display = '';
    }
  });
}

document.addEventListener('DOMContentLoaded', function () {
  const checkboxes = document.querySelectorAll('.complementaryProducts');
  const productDivs = document.querySelectorAll('.product-item-upsell');

  // Attach event listener to checkboxes
  checkboxes.forEach(function (checkbox) {
    // Prevent the event from propagating to the parent div
    checkbox.addEventListener('click', function (event) {
      event.stopPropagation();
    });

    checkbox.addEventListener('change', function () {
      updateCount();
      updateTotalOrderValue();
    });
  });

  // Attach event listener to product divs
  productDivs.forEach(function (productDiv) {
    productDiv.addEventListener('click', function () {
      const checkbox = productDiv.querySelector('.complementaryProducts');
      if (checkbox) {
        checkbox.checked = !checkbox.checked; // Toggle the checkbox
        checkbox.dispatchEvent(new Event('change')); // Trigger the change event
      }
    });
  });

  // Initialize count and total value
  updateCount();
  updateTotalOrderValue();
});

document.getElementById('popupOverlay').addEventListener('click', function (event) {
  if (event.target === this) {
    hidePopup();
  }
});

// Add event listener for variant changes
document.addEventListener('variant:change', function (event) {
  const newSku = event.detail.variant.sku;
  document.getElementById('productPopup').dataset.mainSku = newSku;
  if (document.getElementById('productPopup').style.display === 'block') {
    filterComplementaryProducts();
  }
});

document.addEventListener('cart:updated', function (evt) {
  // console.log("Cart updated", evt.detail);
  const cartContent = evt.detail.cart;
  const cartBeforeContent = evt.detail.cartBeforeContent;
  const lineKey = evt.detail.line;
  const delProdID = cartContent["items_removed"][0]["product_id"];
  const cartBeforeContentProdID = cartBeforeContent["items"].filter((lineItem2) => lineItem2["key"] === lineKey);
  const lineItemAfterChange = cartContent["items"].filter((lineItem2) => lineItem2["key"] === lineKey);
  // console.log("delProdID", delProdID, "cartBeforeContentProdID", cartBeforeContentProdID, "lineItemAfterChange", lineItemAfterChange, "cartBeforeContent", cartBeforeContent);
  var cartContent1 = "";
  const delProductProperties = cartBeforeContentProdID[0]["properties"]['_FBT'];
  const delProductPropertiesID = parseInt(cartBeforeContentProdID[0]["properties"]['_FBTMST']);
  const delProductQty = parseInt(lineItemAfterChange.length === 0 ? 0 : lineItemAfterChange[0]["quantity"]);
  // console.log("delProdID", delProdID, "cartBeforeContentProdID", cartBeforeContentProdID, "lineItemAfterChange", lineItemAfterChange, "delProductProperties", delProductProperties, "delProductPropertiesID", delProductPropertiesID, "delProductQty", delProductQty);
  if (delProductPropertiesID == 1 && delProductQty == 0) {
    removeProductsFromCart(cartContent, delProductProperties)
      .then(() => {
        // console.log("All products have been removed from the cart.");
      })
      .catch(error => {
        console.error("An error occurred while removing products from the cart:", error);
      });
  }
});

async function removeProductsFromCart(cartContent, delProductProperties) {
  document.getElementsByName("checkout")[0].disabled = true; // Disable checkout button
  const updates = {}; // Collect all line items to be removed

  for (let i = 0; i < cartContent["items"].length; i++) {
    if (cartContent["items"][i]["properties"]['_FBT'] == delProductProperties) {
      const removeProductID = cartContent["items"][i]["variant_id"];
      updates[removeProductID] = 0; // Set quantity to 0 for removal
    }
  }

  if (Object.keys(updates).length > 0) {
    try {
      const response = await fetch(window.Shopify.routes.root + 'cart/update.js', {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          updates,
          sections: ["mini-cart", "cart-icon-bubble"]
        })
      });

      if (!response.ok) {
        throw new Error("Failed to update cart: " + response.statusText);
      }
      const result = await response.json();

      // Update mini-cart and cart icon
      const parser = new DOMParser();
      const htmlString = result.sections['mini-cart'];
      const htmlElement = parser.parseFromString(htmlString, "text/html");
      const cartDrawer = htmlElement.getElementsByClassName('mini-cart__inner')[0].outerHTML;

      document.getElementsByClassName('mini-cart')[0].innerHTML = cartDrawer;
      document.getElementById('cart-icon-bubble').innerHTML = result.sections['cart-icon-bubble'];

      // Check if the cart is empty
      if (result.item_count === 0) {
        document.getElementsByClassName('mini-cart')[0].classList.add('is-empty');
      } else {
        document.getElementsByClassName('mini-cart')[0].classList.remove('is-empty');
      }

    } catch (error) {
      console.error("Error during cart update:", error);
    }
  }
  document.getElementsByName("checkout")[0].disabled = false; // Enable checkout button
}
</script>

<style>
.product-popup__overlay {
  display: block;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 998;
  cursor: pointer;
  transition: opacity 0.4s ease-in-out;
  opacity: 0;
  visibility: hidden;
  margin: 0 !important;
}
.product-popup__overlay.show {
  opacity: 1;
  visibility: visible;
}
.product-popup {
  position: fixed;
  bottom: -100%;
  right: 0;
  background: #fff;
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
  z-index: 999;
  max-width: 600px;
  width: 100%;
  transition: bottom 0.4s ease-in-out;
}
.product-popup.show {
  bottom: 0;
}
.product-popup__header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #bbbbbb85;
  padding: 1rem 1.5rem;
  background-color: #f6f6f6;
  border-radius: 1.5rem 1.5rem 0 0;
  gap: 1rem;
}
.upsell-featured-image img.rounded-xs {
  border: 1px solid #f6f6f6;
  border-radius: 8px;
}
.product-popup__close {
  position: absolute;
  top: -50px;
  left: 50%;
  transform: translateX(-50%);
  cursor: pointer;
  width: 30px;
  height: 30px;
  border: none;
  padding: 9px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #fff;
  line-height: 1;
  margin-bottom: auto;
  border-radius: 50%;
}
.product-popup__content {
  text-align: center;
}
.upsell-product-title {
  font-size: 14px;
  font-weight: bold;
  line-height: 1.4;
  padding-right: 0.8rem;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}
.upsell-featured-image {
  display: inline-flex;
  flex: 30%;
  flex-grow: 1;
  flex-shrink: 0;
}
.upsell-details {
  flex: 70%;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  row-gap: 1px;
}
.selected-count-upsell {
  display: inline-block;
  margin-left: 1px;
  font-size: 14px;
  color: inherit;
}
.complementary-products-section {
  margin-top: 20px;
}
.complementary-products-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
}
.complementary-product-item {
  background: #fff;
  border: 1px solid #e1e1e1;
  padding: 10px;
  text-align: center;
  border-radius: 5px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
.complementary-product-link {
  text-decoration: none;
  color: inherit;
}
.complementary-product-image img {
  width: 100%;
  height: auto;
  border-radius: 5px;
}
.complementary-product-title {
  font-size: 1rem;
  font-weight: bold;
  margin-top: 10px;
}
.complementary-product-price {
  font-size: 1.2rem;
  margin-top: 5px;
}
.complementary-product-price .original-price {
  text-decoration: line-through;
  color: #999;
}
.complementary-product-price .discounted-price {
  color: #e63946;
  font-weight: bold;
}
.complementary-product-price .price {
  color: #333;
}
.complementary-products-upsell {
  background-color: #f9fafb;
  padding: 24px;
  border-radius: 8px;
  margin: 0 auto;
}
.complementary-products-upsell .title-upsell {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 16px;
  font-weight: bold;
  margin-top: 0;
  margin-bottom: 1rem;
  text-align: left;
}
.complementary-products-upsell .subtitle-upsell {
  font-size: 14px;
  color: #6b7280;
  margin-top: 0;
  margin-bottom: 16px;
}
.product-list-upsell {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  max-height: 220px;
  overflow: auto;
}
.product-item-upsell {
  display: flex;
  align-items: center;
  background-color: white;
  padding: 0;
  border-radius: 10px;
}
.product-image-upsell {
  display: inline-flex;
  flex: 25%;
  flex-grow: 1;
  flex-shrink: 0;
}
.product-detail-upsell {
  flex: 75%;
  text-align: left;
  display: flex;
  justify-content: space-between;
  align-self: stretch;
}
.header-variant {
  font-size: 12px;
  color: #757575;
  letter-spacing: .5px;
}
.product-info-upsell {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  flex-grow: 1;
}
.product-info-upsell .price-upsell {
  font-size: 14px;
  font-weight: bold;
  margin: 0;
}
/* Style the checkbox to look like a button */
.product-select-upsell input[type="checkbox"] {
  appearance: none;
  -webkit-appearance: none;
  width: 55px;
  height: auto;
  padding: 4px 8px;
  border-radius: 4px;
  border: 1px solid rgba(30, 30, 30);
  background: #FFF;
  color: #1e1e1e;
  font-size: 12px;
  font-weight: 500;
  cursor: pointer;
  text-align: center;
  transition: all 0.3s ease;
  display: inline-block;
  overflow: hidden;
  white-space: nowrap;
  margin-inline-end: 0;
  margin: 0;
}
/* Default label for the button */
.product-select-upsell input[type="checkbox"]::before {
  content: "Add +";
  display: inline-block;
  width: 100%;
  text-align: center;
}
/* Style when the checkbox is checked */
.product-select-upsell input[type="checkbox"]:checked {
  background: #000;
  color: #FFF;
  border-color: #000;
}
/* Label for the button when checked */
.product-select-upsell input[type="checkbox"]:checked::before {
  content: "Added";
}
.badge-upsell {
  background-color: #fff7ed;
  color: #ea580c;
  font-size: 10px;
  font-weight: 500;
  padding: 4px 8px;
  border-radius: 9999px;
}
.product-list-container {
  max-height: 400px;
  overflow-y: auto;
}
.variant-details {
  line-height: 1.4 !important;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  margin-bottom: 7px;
  font-size: 12px;
  color: #757575;
  letter-spacing: 0.5px;
}
.complementary-products-upsell {
  padding: 1rem 1.5rem;
}
.product-info-upsell .product-title-upsell {
  font-size: 13px;
  text-align: left;
  margin: 0px;
  font-weight: 600;
  line-height: 1.4;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}
.price-container {
  display: inline-flex;
  align-items: baseline;
}
.product-info-upsell .price-upsell {
  font-size: 14px;
  text-align: left;
  margin-top: 5px;
  font-weight: 600;
}
.compare-price-upsell {
  text-decoration: line-through;
  color: #525252;
  font-size: 12px;
}
.price-upsell {
  font-weight: 600;
  margin-right: 5px;
  color: black;
}
span.price-upsell-sale-list {
  font-size: 13px;
  font-weight: 600;
  margin-right: 5px;
}
span.price-upsell-compare-list {
  color: #525252;
  text-decoration: line-through;
  font-size: 12px;
}
h2#totalOrderValue {
  font-size: 1.4rem;
  font-weight: 600;
  line-height: 1;
}
.product-item-upsell.most-ordered-upsell {
  padding: 0;
  border: 2px solid #E89751;
}
.badge-upsell.new {
  background-color: #E89751;
  color: #fff;
  padding: 0;
  font-weight: 600;
  text-transform: uppercase;
  writing-mode: vertical-rl;
  text-orientation: mixed;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 0 8px 8px 0;
  transform: rotate(180deg);
  align-self: stretch;
}
#totalOrderValue:before {
  content: "";
  display: inline-block;
  vertical-align: middle;
  margin: 0 1.5rem;
  height: .15rem;
  width: 1rem;
  background-color: currentColor;
}
.product-item-upsell .rating {
  display: flex;
  align-items: center;
  width: fit-content;
  gap: 4px;
  background: #F2F2F2;
  border-radius: 4px;
  padding-inline: 5px;
  font-size: 11px;
  font-weight: 500;
}
.product-item-upsell .saving-amount {
  display: inline-block;
  white-space: nowrap;
  background: #00C34B;
  font-size: 10px;
  color: #fff;
  font-weight: 600;
  padding-inline: 4px;
  border-radius: 4px;
  text-align: center;
}
.product-item-upsell-inner {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px;
}
.product-add-upsell {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.product-select-upsell {
  display: flex;
  justify-content: flex-end;
}
/* Desktop CSS */
@media screen and (min-width: 750px) {
  .default_atc_pdp {
    display: flex !important;
  }
  .product-popup {
    max-width: 400px;
  }
  .product-popup.show {
    bottom: 20px;
    right: 20px;
    border-radius: 8px;
    max-width: 400px;
  }
  .popup-footer {
    display: flex;
    justify-content: center;
    width: 100%;
    margin-inline: auto;
    padding-bottom: 1rem;
    padding-inline: 1.5rem;
  }
  .popup-footer .sticky-cart__form, .popup-footer .sticky-cart__form form, .popup-footer .sticky-cart__form .product-form__buttons, .popup-footer .sticky-cart__form .button--small {
    width: 100%;
    border-radius: 10px;
  }
}
</style>
